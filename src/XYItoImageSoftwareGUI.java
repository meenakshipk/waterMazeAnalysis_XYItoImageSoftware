
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Meenakshi P created on 21.07.2019 Neurodynamics lab, CNS, IISc
 *
 * utilised code from XYI2Image software created by J Balaji
 *
 * 21-07-2019 15.36 - check code for fWriter, one component, posval and
 * negval. The equivalent for two components seems to be working fine.
 * 21-07-201 18.42 - 15.36 comment checked and corrected. Fix progress bar - it does not reset after selecting one set of files.
 */
public class XYItoImageSoftwareGUI extends javax.swing.JDialog {

    private Component frame;
    private boolean isOneComponent;
    private int valsample;

    /**
     * Creates new form gui
     */
    public XYItoImageSoftwareGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupFileFormat = new javax.swing.ButtonGroup();
        buttonGroupValSampled = new javax.swing.ButtonGroup();
        browseButton = new javax.swing.JButton();
        xPixels = new javax.swing.JTextField();
        yPixels = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fileProgressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonOneComponent = new javax.swing.JRadioButton();
        jRadioButtonTwoComponent = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jRadioButtonAllVal = new javax.swing.JRadioButton();
        jRadioButtonPosVal = new javax.swing.JRadioButton();
        jRadioButtonNegVal = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("XYI to Image software");

        browseButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        xPixels.setText("240");

        yPixels.setText("240");

        jLabel1.setText("xPixels");

        jLabel2.setText("yPixels");

        jLabel3.setText("Select the data file to be used  ");

        jLabel4.setText("Progress Bar:");

        jLabel5.setText("Instructions: Please (1) enter image dimensions, (2) select format of input ASCII file, (3) select values to be sampled.");

        jLabel6.setText("Select format of data files:");

        buttonGroupFileFormat.add(jRadioButtonOneComponent);
        jRadioButtonOneComponent.setText("One component ASCII - xPixel \\t yPixel \\t pixIntensity \\n");

        buttonGroupFileFormat.add(jRadioButtonTwoComponent);
        jRadioButtonTwoComponent.setText("Two component ASCII - xPixel \\t yPixel \\t xpixIntensity \\t ypixIntensity \\n");

        jLabel7.setText("Select values to be sampled:");

        buttonGroupValSampled.add(jRadioButtonAllVal);
        jRadioButtonAllVal.setText("All values");

        buttonGroupValSampled.add(jRadioButtonPosVal);
        jRadioButtonPosVal.setText("Positive values");

        buttonGroupValSampled.add(jRadioButtonNegVal);
        jRadioButtonNegVal.setText("Negative values");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(49, 49, 49)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(xPixels, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yPixels, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6)
                    .addComponent(jRadioButtonOneComponent)
                    .addComponent(jRadioButtonTwoComponent)
                    .addComponent(jLabel7)
                    .addComponent(jRadioButtonAllVal)
                    .addComponent(jRadioButtonPosVal)
                    .addComponent(jRadioButtonNegVal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xPixels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yPixels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonOneComponent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonTwoComponent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAllVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonPosVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonNegVal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:

        //Set file format
        String selectedFileFormat = "";
        if (this.jRadioButtonOneComponent.isSelected()) {
            isOneComponent = true;
            selectedFileFormat = this.jRadioButtonOneComponent.getText();
        } else if (this.jRadioButtonTwoComponent.isSelected()) {
            isOneComponent = false;
            selectedFileFormat = this.jRadioButtonTwoComponent.getText();
        }

        //Set values to be sampled
        String selectedValSample = "";
        if (this.jRadioButtonAllVal.isSelected()) {
            valsample = 0;
            selectedValSample = this.jRadioButtonAllVal.getText();
        } else if (this.jRadioButtonPosVal.isSelected()) {
            valsample = 1;
            selectedValSample = this.jRadioButtonPosVal.getText();
        } else if (this.jRadioButtonNegVal.isSelected()) {
            valsample = 2;
            selectedValSample = this.jRadioButtonNegVal.getText();
        }

        /**
         * Open the file chooser and select data file
         */
        JFileChooser Fc = new JFileChooser();
        Fc.setMultiSelectionEnabled(true);
        int result = Fc.showOpenDialog(this);

        /**
         * Once the user closes the dialog box read the file/files selected in
         * an array
         */
        File[] dataFiles = null;
        float xData, yData;                             //for storing the read xPixel no and Y Pixel no of the PixelIntesity read from the file. 

        FileReader fReader = null;                      //Reader class : Java class for reading text files (ASCII) 
        int c = 0;                                          //variable to store the byte/int data that is read from the file 
        String dataString = "";                        //accumulates the intenisty data as a string of numbers and decimal through concatenation. Will be converted to float

        if (result == JFileChooser.APPROVE_OPTION) {

            dataFiles = Fc.getSelectedFiles();
            int noFiles = dataFiles.length;                     //stores the number of files selected by the user

            /**
             * Initialization of variables
             */
            xData = 0;
            yData = 0;

            /**
             * Reading the size of the image (in pixels) from user input
             */
            int xPixelNo = Integer.parseInt(xPixels.getText());
            int yPixelNo = Integer.parseInt(yPixels.getText());
            int totalPixels = xPixelNo * yPixelNo;

            // set initial value of progress bar
            fileProgressBar.setMaximum(dataFiles.length);
            fileProgressBar.setValue(0);
            fileProgressBar.setStringPainted(true);

            //when file format has been selected for one component
            if (isOneComponent) {

                ArrayList<Float> pData = new ArrayList();                        //Data holder: float array for storing the complete image data
                boolean inX = true;

                /**
                 * Loop through file selection array one at a time
                 */
                for (File curFile : dataFiles) {

                    /**
                     * Initializing the float array to have 0's to start with
                     */
                    for (int count = 0; count < totalPixels; count++) {
                        pData.add((float) 0);
                    }

                    /**
                     * Loop through file selection array one at a time
                     */
                    if (curFile.exists()) {
                        try {
                            fReader = new FileReader(curFile);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            while ((c = fReader.read()) != -1) {
                                switch (c) {
                                    case '\t':
                                        if (inX) {
                                            xData = Math.round(Float.parseFloat(dataString));
                                        } else {
                                            yData = Math.round(Float.parseFloat(dataString));
                                        }
                                        inX = !inX;
                                        dataString = "";
                                        break;
                                    case '\n':
                                        float data = Float.parseFloat(dataString);
                                        int arrayIdx = (int) ((yData * xPixelNo) + xData);
                                        data += pData.get(arrayIdx);
                                        pData.set(arrayIdx, data);
                                        dataString = "";
                                        break;
                                    default:
                                        dataString += (char) c;
                                }
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        File fOut = new File(curFile.getParent() + "\\" + "Img_of" + curFile.getName());
                        if (fOut != null) {

                            try {
                                FileWriter fWriter = new FileWriter(fOut);
                                int pixelCounter = 0;
                                int xPixelLimit = xPixelNo - 1;
                                for (float data : pData) {
                                    //fWriter.write(data+"");

                                    switch (valsample) {
                                        case 0:
                                            if (pixelCounter == xPixelLimit) {
                                                fWriter.write(data + "\n");
                                                pixelCounter = 0;
                                            } else {
                                                fWriter.write(data + "\t");
                                                pixelCounter++;
                                            }
                                            break;

                                        case 1:
                                            if (pixelCounter == xPixelLimit) {
                                                if (data > 0) {
                                                    fWriter.write(data + "\n");
                                                } else {
                                                    fWriter.write(0 + "\n");
                                                }
                                                pixelCounter = 0;
                                            } else {
                                                if (data > 0) {
                                                    fWriter.write(data + "\t");
                                                } else {
                                                    fWriter.write(0 + "\t");
                                                }
                                                pixelCounter++;
                                            }
                                            break;

                                        case 2:
                                            if (pixelCounter == xPixelLimit) {
                                                if (data < 0) {
                                                    fWriter.write(data + "\n");
                                                } else {
                                                    fWriter.write(0 + "\n");
                                                }
                                                pixelCounter = 0;
                                            } else {
                                                if (data < 0) {
                                                    fWriter.write(data + "\t");
                                                } else {
                                                    fWriter.write(0 + "\t");
                                                }
                                                pixelCounter++;
                                            }
                                            break;

                                    }
                                }
                                fWriter.close();
                                pData.clear();
                            } catch (IOException ex) {
                                Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    try {
                        fileProgressBar.setValue(fileProgressBar.getValue() + 1);
                    } catch (Exception e) {
                    }
                }
                JOptionPane.showMessageDialog(frame, "Task completed. ASCII files of one component converted.");

            } else { //when file format has been selected for two components
                ArrayList<Float> pxData = new ArrayList();
                ArrayList<Float> pyData = new ArrayList();
                int whereAmI = 0;
                int arrayIdx = 0;
                for (File curFile : dataFiles) {
                    /**
                     * Initializing the float array to have 0's to start with
                     */

                    for (int count = 0; count < totalPixels; count++) {
                        pxData.add((float) 0);
                        pyData.add((float) 0);
                    }
                    /**
                     * Loop through file selection array one at a time
                     */
                    if (curFile.exists()) {
                        try {
                            fReader = new FileReader(curFile);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            while ((c = fReader.read()) != -1) {

                                switch (c) {
                                    case '\t':

                                        switch (whereAmI) {
                                            case 0:
                                                xData = Math.round(Float.parseFloat(dataString));
                                                break;
                                            case 1:
                                                yData = Math.round(Float.parseFloat(dataString));
                                                break;
                                            case 2:
                                                float data = Float.parseFloat(dataString);
                                                arrayIdx = (int) ((yData * xPixelNo) + xData);
                                                data += pxData.get(arrayIdx);
                                                pxData.set(arrayIdx, data);

                                                /*System.out.println(arrayIdx+"");*/
                                                break;
                                        }
                                        whereAmI += 1;
                                        dataString = "";
                                        /*if(inX)
                                        xPix = Float.parseFloat(dataString);
                                     else
                                        yPix = Float.parseFloat(dataString);
                                     inX = !inX;
                                     dataString = "";*/
                                        break;
                                    //case '\r':
                                    case '\n':
                                        float data = (!dataString.isEmpty()) ? Float.parseFloat(dataString) : 0;
                                        if (!Float.isNaN(data)) {
                                            //arrayIdx = (int)(yPix*xPixelNo + xPix);
                                            data += pyData.get(arrayIdx);
                                            pyData.set(arrayIdx, data);

                                        }
                                        dataString = "";
                                        whereAmI = 0;
                                        break;
                                    default:
                                        //if(c != '\r')
                                        dataString += (char) c;
                                }
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        File xOut = new File(curFile.getParent() + "\\" + "xImg_of" + curFile.getName());
                        File yOut = new File(curFile.getParent() + "\\" + "yImg_of" + curFile.getName());
                        /*System.out.println("Entering the writing regime...");*/
                        if (xOut != null && yOut != null) {

                            try {
                                FileWriter xWriter = new FileWriter(xOut);
                                FileWriter yWriter = new FileWriter(yOut);
                                int pixelCounter = 1;
                                //int yDataCounter = 0; 

                                int xPixelLimit = xPixelNo;
                                float ydata = 0;
                                float xdata = 0;
                                if (pxData.size() != pyData.size()) {
                                    System.out.println("Internal Error: Data Size mismatch");
                                    return;
                                }
                                for (int DataCounter = 0; DataCounter < pxData.size(); DataCounter++) {
                                    //values to be sampled

                                    switch (valsample) {
                                        case 0: //all values sampled
                                            xdata = pxData.get(DataCounter);
                                            ydata = pyData.get(DataCounter);
                                            break;
                                        case 1: //positive values sampled
                                            if (pxData.get(DataCounter) > 0) {
                                                xdata = pxData.get(DataCounter);
                                            } else {
                                                xdata = 0;
                                            }

                                            if (pyData.get(DataCounter) > 0) {
                                                ydata = pyData.get(DataCounter);
                                            } else {
                                                ydata = 0;
                                            }
                                            break;
                                        case 2: //negative values sampled
                                            if (pxData.get(DataCounter) < 0) {
                                                xdata = pxData.get(DataCounter);
                                            } else {
                                                xdata = 0;
                                            }

                                            if (pyData.get(DataCounter) < 0) {
                                                ydata = pyData.get(DataCounter);
                                            } else {
                                                ydata = 0;
                                            }
                                            break;
                                    }

                                    if (pixelCounter == xPixelLimit) {
                                        xWriter.write(xdata + "\n");
                                        yWriter.write(ydata + "\n");
                                        pixelCounter = 1;
                                    } else {
                                        xWriter.write(xdata + "\t");
                                        yWriter.write(ydata + "\t");
                                        pixelCounter++;
                                    }
                                    // yDataCounter++;
                                }
                                xWriter.close();
                                yWriter.close();
                                pxData.clear();
                                pyData.clear();
                            } catch (IOException ex) {
                                Logger.getLogger(XYItoImageSoftwareGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    try {
                        fileProgressBar.setValue(fileProgressBar.getValue() + 1);
                    } catch (Exception e) {
                    }
                }
                JOptionPane.showMessageDialog(frame, "Task completed. ASCII files of two components converted.");
            }
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XYItoImageSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XYItoImageSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XYItoImageSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XYItoImageSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                XYItoImageSoftwareGUI dialog = new XYItoImageSoftwareGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.ButtonGroup buttonGroupFileFormat;
    private javax.swing.ButtonGroup buttonGroupValSampled;
    private javax.swing.JProgressBar fileProgressBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButtonAllVal;
    private javax.swing.JRadioButton jRadioButtonNegVal;
    private javax.swing.JRadioButton jRadioButtonOneComponent;
    private javax.swing.JRadioButton jRadioButtonPosVal;
    private javax.swing.JRadioButton jRadioButtonTwoComponent;
    private javax.swing.JTextField xPixels;
    private javax.swing.JTextField yPixels;
    // End of variables declaration//GEN-END:variables
}
